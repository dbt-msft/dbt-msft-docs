"use strict";(self.webpackChunkdbt_sqlserver_docs=self.webpackChunkdbt_sqlserver_docs||[]).push([[679],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},112:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={title:"Azure DevOps Pipelines Example",sidebar_position:5},p="ado_pipelines_example",s={unversionedId:"ado_pipelines_example",id:"ado_pipelines_example",isDocsHomePage:!1,title:"Azure DevOps Pipelines Example",description:"example pipelines for deploying dbt via Azure DevOps pipelines",source:"@site/docs/ado_pipelines_example.md",sourceDirName:".",slug:"/ado_pipelines_example",permalink:"/dbt-msft-docs/docs/ado_pipelines_example",editUrl:"https://github.com/dbt-msft/dbt-msft-docs/tree/documentation/docs/ado_pipelines_example.md",version:"current",sidebarPosition:5,frontMatter:{title:"Azure DevOps Pipelines Example",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Synapse Syntax Wish List",permalink:"/dbt-msft-docs/docs/dbt-synapse/synapse_syntax_wishlist"},next:{title:"Contributing to dbt-msft-docs",permalink:"/dbt-msft-docs/docs/contributing"}},c=[{value:"Overview",id:"overview",children:[{value:"Azure CLI  task",id:"azure-cli--task",children:[]},{value:"profile tweaks",id:"profile-tweaks",children:[]}]},{value:"Steps to Set Up",id:"steps-to-set-up",children:[]}],d={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ado_pipelines_example"},"ado_pipelines_example"),(0,a.kt)("p",null,"example pipelines for deploying dbt via Azure DevOps pipelines"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("h3",{id:"azure-cli--task"},"Azure CLI  task"),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("inlineCode",{parentName:"p"},".yml")," files in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dbt-msft/ado_pipelines_example/tree/main/build"},(0,a.kt)("inlineCode",{parentName:"a"},"build/")," dir")," for our pipelines."),(0,a.kt)("p",null,"Once you have an ADO ARM Service Connection that has owner permission on the db, the work is done. With the ",(0,a.kt)("inlineCode",{parentName:"p"},"AzureCLI")," task and the ",(0,a.kt)("inlineCode",{parentName:"p"},"azureSubscription")," param, you never have to call ",(0,a.kt)("inlineCode",{parentName:"p"},"az login"),", it will do that for you automatically."),(0,a.kt)("p",null,"To make the secret pipeline variables available to the task, you have to map them with the ",(0,a.kt)("inlineCode",{parentName:"p"},"env")," dict shown below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- task: AzureCLI@2\n  displayName: 'dbt run'\n  inputs:\n    azureSubscription: ITSDETEAM\n    ScriptType: bash\n    scriptLocation: inlineScript\n    inlineScript: |\n      dbt run --profiles-dir $(location)\n  env:\n    HOST: $(host)\n    DB: $(db)\n")),(0,a.kt)("h3",{id:"profile-tweaks"},"profile tweaks"),(0,a.kt)("p",null,"To avoid uploading a secure file containing our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dbt-msft/ado_pipelines_example/blob/main/packages.yml"},(0,a.kt)("inlineCode",{parentName:"a"},"build/profiles.yml")),", we just added three environment variable references to the only target. This allows us to just set the server and db within the Azure Pipeline itself."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'jaffle_shop:\n  target: default\n  outputs:\n    default:\n      type: sqlserver # or synapse or whatever you want\n      driver: "ODBC Driver 17 for SQL Server"\n      schema: "{{ env_var(\'SCHEMA\') }}"\n      host: "{{ env_var(\'HOST\') }}"\n      database: "{{ env_var(\'DB\') }}"\n      authentication: CLI\n      port: 1433\n')),(0,a.kt)("h2",{id:"steps-to-set-up"},"Steps to Set Up"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Commit the build directory here to your dbt project repo."),(0,a.kt)("li",{parentName:"ol"},"Create an Azure Active Directory App Registration (aka Service Principal aka AAD App)"),(0,a.kt)("li",{parentName:"ol"},"Set the Azure Active Directory Admin on the Azure SQL/Synapse db to be either you or a DL that contains you."),(0,a.kt)("li",{parentName:"ol"},"Log into db with AAD admin creds and add the App Registration as an owner on your dev and prod db's",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE USER [my_service_connection] FROM EXTERNAL PROVIDER\nexec sp_addrolemember 'db_owner', 'my_service_connection'\n"))),(0,a.kt)("li",{parentName:"ol"},"Create an Azure Resource Manager Service Connection in Azure DevOps for the AAD App (Ours is called ",(0,a.kt)("inlineCode",{parentName:"li"},"ITSDETEAM"),")"),(0,a.kt)("li",{parentName:"ol"},"Follow the normal workflow to create a new Azure pipeline based on an existing YAML file in the repo. For the following pipelines, you'll need to make add some ",(0,a.kt)("a",{parentName:"li",href:"https://i.stack.imgur.com/3WBDC.png"},"secret pipeline variables")," :",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"gatekeeper.yml")," (i.e. CI): ",(0,a.kt)("inlineCode",{parentName:"li"},"$(DEV_SERVER)")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"$(DEV_DB)")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"prod.yml")," (i.e. CD) ",(0,a.kt)("inlineCode",{parentName:"li"},"$(PROD_SERVER)")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"$(PROD_DB)")))),(0,a.kt)("li",{parentName:"ol"},"make a branch policy for your ",(0,a.kt)("inlineCode",{parentName:"li"},"dev")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"UAT")," branch so that all PRs require that the gatekeeper passes"),(0,a.kt)("li",{parentName:"ol"},"change the trigger and schedules to fit your needs.")))}u.isMDXComponent=!0}}]);